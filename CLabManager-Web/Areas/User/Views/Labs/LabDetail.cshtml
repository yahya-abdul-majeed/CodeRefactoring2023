@model ModelsLibrary.Models.ViewModels.LabDetailVM
@{
    var labModel = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Lab);
}

<!-- Modal start-->
<div class="modal hide fade " id="computerModal" tabindex="-1" role="dialog" aria-labelledby="computerModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="titleModalLabel">Describe your Issue</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h4 id="IssueHeader"></h4>
                <form>
                    <div class="form-group">
                        <label for="issueTitle">Issue title</label>
                        <input type="text" id="issueTitle" name="issueTitle" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="issueDesc">Issue Description</label>
                        <textarea type="text" id="issueDesc" name="issueDesc" class="form-control"></textarea>
                    </div>
                    <div class="form-group mb-2">
                        <label for="priorities">Issue priority</label>
                        <select class="form-select" id="priorities" name="priorities" asp-items="Model.priorities">

                        </select>
                    </div>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="issueCreationSave">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>
<!--Model end-->

<div id="gridContainer" class="container">

</div>

@section Scripts{
    <script>
        var lab = @Html.Raw(labModel)
        var idCount = 0
        var currentCompId = null

        $(document).ready(function(){
                if (lab.GridType === 1) {
                    drawGridType1()
                } else if (lab.GridType === 2) {
                    drawGridType2()
                }
                assignComputersToGrid()

                $('#issueCreationSave').click(function(){
                    let formData = {
                      priority: $('#priorities').val(),
                      title: $('#issueTitle').val(),
                      description: $('#issueDesc').val(),
                      state: 0,
                      computerId: currentCompId,
                      labId: lab.LabId
                    }
                    console.log(formData)
                    $.ajax({
                        type:"POST",
                        url: "https://localhost:7138/api/Issues",
                        headers:{
                            "content-type":"application/json"
                        },
                        data:JSON.stringify(formData),
                        success: function(){
                            console.log("request successful for issue post")
                            $('#issueTitle').val('')
                            $('#issueDesc').val('')
                            $('#priorities').val('Urgent')
                        },
                        error: function(){
                            console.log("error for issue post")
                           
                        }
                    })
                    console.log(formData)
                })
        })
        function createSingleAllotment() {
            var box = document.createElement('div');
            box.id = idCount++
            box.style.height = '100px';
            box.style.width = '100px';
            box.style.background = 'grey';
            box.style.border = "10px solid black"
            box.style.margin = "5px";
            box.style.padding = "0px"
            box.classList.add("col-2")
            
            return box;
        }

        function drawGridType1() {
            var container = document.getElementById('gridContainer');

            function createTeacherRow() {
                console.log("teacher row")
                var teachersRow = document.createElement('div')
                teachersRow.classList.add("row")
                teachersRow.appendChild(createSingleAllotment())
                container.appendChild(teachersRow)
            }

            function createstudentRow() {
                console.log("student row")
                var emptyDiv = document.createElement('div')
                emptyDiv.classList.add("col-2")
                emptyDiv.style.height = '100px'
                emptyDiv.style.width = '100px'
                var studentsRow = document.createElement('div')
                studentsRow.classList.add("row")
                studentsRow.appendChild(createSingleAllotment())
                studentsRow.appendChild(createSingleAllotment())
                studentsRow.appendChild(emptyDiv)
                studentsRow.appendChild(createSingleAllotment())
                studentsRow.appendChild(createSingleAllotment())
                container.appendChild(studentsRow)
            }

            createTeacherRow()
            createstudentRow()
            createstudentRow()
            createstudentRow()

        }

        function drawGridType2() {
            var container = document.getElementById('gridContainer');

            function createTeachersRow() {
                var teachersRow = document.createElement('div')
                teachersRow.classList.add("row")
                teachersRow.classList.add("justify-content-center")
                teachersRow.appendChild(createSingleAllotment())
                container.appendChild(teachersRow)

            }
            function createStudentsRow() {

                var studentsRow = document.createElement('div')
                studentsRow.classList.add("row")
                studentsRow.classList.add("d-flex")
                studentsRow.classList.add("justify-content-between")
                studentsRow.appendChild(createSingleAllotment())
                studentsRow.appendChild(createSingleAllotment())
                container.appendChild(studentsRow)
            }
            createTeachersRow()
            createStudentsRow()
            createStudentsRow()
            createStudentsRow()

        }

        function assignComputersToGrid() {
                lab.ComputerList.map(computer => {
                var myimg = document.createElement('img')
                myimg.id = computer.ComputerId
                myimg.name = computer.ComputerName
                console.log('sexy id', myimg.id)
                myimg.src = "/images/ComputerIcon.png"
                myimg.alt = "computer"
                myimg.style.width = "80px"
                myimg.style.height = "80px"
                //myimg.setAttribute('data-bs-toggle','modal')
                //myimg.setAttribute('data-bs-target','#computerModal')
                myimg.onclick = function(){
                    console.log('clickd image')
                    $('#IssueHeader').html(`Issue for computer: ${myimg.name}, LabId: ${lab.LabId}`)
                    currentCompId = myimg.id
                    var myModal = new bootstrap.Modal(document.getElementById('computerModal'), {
                        keyboard: false
                    })
                    myModal.show()
                }
                console.log('#' + computer.PositionOnGrid)
                //document.getElementById(computer.PositionOnGrid).appendChild(myimg)
                document.querySelector(`#gridContainer #\\3${computer.PositionOnGrid} `).appendChild(myimg)
            })
        }
    </script>
}